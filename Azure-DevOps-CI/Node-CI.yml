trigger:
  branches:
    include:
    - main
    - develop
    - release/*
name: $(Date:yyMMdd)$(Rev:.rrr)
variables:
- name: zipPrefix
  value: UOCUtility_
- name: feedPath
  value: uoc-feed
- name: feedPackageName
  value: uoc-utility
- name: feedPackageDescription
  value: Utility API for 3rd party apps on UoC
stages:
- stage: __default
  jobs:
  - job: Job
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'
    - task: replacetokens@4
      displayName: 'Set build version in Utility config'
      inputs:
        rootDirectory: '$(Build.SourcesDirectory)'
        targetFiles: 'src/config/configuration.ts'
        encoding: 'auto'
        tokenPattern: 'default'
        writeBOM: true
        actionOnMissing: 'fail'
        keepToken: true
        actionOnNoFiles: 'fail'
        enableTransforms: false
        useLegacyPattern: false
        enableTelemetry: false
    - task: Bash@3
      displayName: 'Generate Version'
      inputs:
        targetType: 'inline'
        script: |
          rawVersion=$(jq -r .version package.json)

          major=$(echo $rawVersion | cut -d '.' -f1)
          echo "This is the major version: $major"
          echo "##vso[task.setvariable variable=major]$major"

          minor=$(echo $rawVersion | cut -d '.' -f2)
          echo "This is the minor version: $minor"
          echo "##vso[task.setvariable variable=minor]$minor"

          patch=$(echo $BUILD_BUILDNUMBER | sed 's/\.//g')
          echo "This is the patch version: $patch"
          echo "This is the build: $BUILD_BUILDNUMBER"
          echo "##vso[task.setvariable variable=patch]$patch"

          branch=$(echo $BUILD_SOURCEBRANCH | cut -d'/' -f 3,4 | tr '/' '-')
          version=${major}.${minor}.${patch}-${branch}
          echo "This is the version: $version"
          echo "##vso[task.setvariable variable=version]$version"
    - task: CmdLine@2
      displayName: 'yarn build'
      inputs:
        script: |
          yarn install
          yarn build
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.Repository.LocalPath)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(build.artifactstagingdirectory)/$(zipPrefix)$(version).zip'
        replaceExistingArchive: true
        verbose: true
    - task: CmdLine@2
      displayName: "Run unit tests"
      inputs:
        script: |
          yarn test:ci
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        searchFolder: $(Build.SourcesDirectory)
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
      displayName: 'Publish unit test results'
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'
        failIfCoverageEmpty: true
    - task: PublishBuildArtifacts@1
      condition: succeeded()
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(zipPrefix)$(version).zip'
        artifactName: UtilityBuild
    - task: UniversalPackages@0
      displayName: 'Publish Artifacts to feed'
      condition: |
        and(
          succeeded(),
          ne(variables['Build.Reason'], 'PullRequest'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/main'),
            eq(variables['Build.SourceBranch'], 'refs/heads/develop'),
            contains(variables['Build.SourceBranch'], 'refs/heads/release/')
          )
        )
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)/$(zipPrefix)$(version).zip'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: $(feedPath)
        vstsFeedPackagePublish: $(feedPackageName)
        versionOption: 'custom'
        versionPublish: $(version)
        packagePublishDescription: $(feedPackageDescription)

